generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model attendance {
  attendance_id Int       @id @default(autoincrement())
  student_id    Int?
  class_id      Int?
  date          DateTime  @db.Date
  status        String?   @db.VarChar(20)
  marked_by     Int?
  remarks       String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  classes       classes?  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([student_id, class_id, date])
  @@index([class_id, date], map: "idx_attendance_class_date")
  @@index([date], map: "idx_attendance_date")
  @@index([student_id, date], map: "idx_attendance_student_date")
}

model class_enrollments {
  enrollment_id   Int       @id @default(autoincrement())
  class_id        Int?
  student_id      Int?
  enrollment_date DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date

  @@unique([class_id, student_id])
}

model classes {
  class_id      Int          @id @default(autoincrement())
  class_name    String       @db.VarChar(100)
  description   String?
  academic_year String       @db.VarChar(9)
  created_at    DateTime?    @default(now()) @db.Timestamp(6)
  attendance    attendance[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model leave_applications {
  leave_id    Int       @id @default(autoincrement())
  student_id  Int?
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  reason      String?
  status      String?   @db.VarChar(20)
  approved_by Int?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

model students {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  class             String    @db.VarChar(20)
  division          String    @db.VarChar(10)
  contact_no        String?   @db.VarChar(20)
  address           String?
  tuition_center_id Int
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  roll_number       String    @db.VarChar(20)
  users             users     @relation(fields: [tuition_center_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([class, division], map: "idx_students_class_division")
  @@index([roll_number], map: "idx_students_roll_number")
  @@index([tuition_center_id], map: "idx_students_tuition_center")
}

model teachers {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String    @db.VarChar(255)
  email             String    @unique @db.VarChar(255)
  phone             String    @db.VarChar(20)
  subject           String    @db.VarChar(100)
  password          String    @db.VarChar(255)
  status            Boolean?  @default(true)
  tuition_center_id Int
  createdAt         DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [tuition_center_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([email], map: "idx_teachers_email")
  @@index([name], map: "idx_teachers_name")
  @@index([tuition_center_id], map: "idx_teachers_tuition_center")
}

model tuition_class {
  id                Int       @id @default(autoincrement())
  class             String    @db.VarChar(100)
  division          String    @db.VarChar(50)
  tuition_center_id Int
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [tuition_center_id], references: [id], onDelete: Cascade)

  @@index([tuition_center_id], map: "idx_tuition_class_center_id")
}

model user_roles {
  id        Int     @id @default(autoincrement())
  role_name String  @unique @db.VarChar(50)
  users     users[]
}

model users {
  id            Int             @id @default(autoincrement())
  username      String          @db.VarChar(100)
  email         String          @unique @db.VarChar(255)
  password_hash String
  role_id       Int
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  students      students[]
  teachers      teachers[]
  tuition_class tuition_class[]
  user_roles    user_roles      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")
}

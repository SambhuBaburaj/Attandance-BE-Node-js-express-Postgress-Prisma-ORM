generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model students {
  student_id         Int                  @id @default(autoincrement())
  first_name         String               @db.VarChar(50)
  last_name          String               @db.VarChar(50)
  email              String?              @unique @db.VarChar(100)
  roll_number        String               @unique @db.VarChar(20)
  date_of_birth      DateTime?            @db.Date
  phone_number       String?              @db.VarChar(15)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  attendance         attendance[]
  class_enrollments  class_enrollments[]
  leave_applications leave_applications[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model attendance {
  attendance_id Int       @id @default(autoincrement())
  student_id    Int?
  class_id      Int?
  date          DateTime  @db.Date
  status        String?   @db.VarChar(20)
  marked_by     Int?
  remarks       String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  classes       classes?  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
  teachers      teachers? @relation(fields: [marked_by], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
  students      students? @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([student_id, class_id, date])
}

model class_enrollments {
  enrollment_id   Int       @id @default(autoincrement())
  class_id        Int?
  student_id      Int?
  enrollment_date DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date
  classes         classes?  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
  students        students? @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([class_id, student_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model class_schedule {
  schedule_id Int       @id @default(autoincrement())
  class_id    Int?
  teacher_id  Int?
  day_of_week Int?
  start_time  DateTime  @db.Time(6)
  end_time    DateTime  @db.Time(6)
  classes     classes?  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction)
  teachers    teachers? @relation(fields: [teacher_id], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
}

model classes {
  class_id          Int                 @id @default(autoincrement())
  class_name        String              @db.VarChar(100)
  description       String?
  academic_year     String              @db.VarChar(9)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  attendance        attendance[]
  class_enrollments class_enrollments[]
  class_schedule    class_schedule[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model leave_applications {
  leave_id    Int       @id @default(autoincrement())
  student_id  Int?
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  reason      String?
  status      String?   @db.VarChar(20)
  approved_by Int?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  teachers    teachers? @relation(fields: [approved_by], references: [teacher_id], onDelete: NoAction, onUpdate: NoAction)
  students    students? @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
}

model teachers {
  teacher_id         Int                  @id @default(autoincrement())
  first_name         String               @db.VarChar(50)
  last_name          String               @db.VarChar(50)
  email              String?              @unique @db.VarChar(100)
  phone_number       String?              @db.VarChar(15)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  attendance         attendance[]
  class_schedule     class_schedule[]
  leave_applications leave_applications[]
}

model user_roles {
  id        Int     @id @default(autoincrement())
  role_name String  @unique @db.VarChar(50)
  users     users[]
}

model users {
  id            Int        @id @default(autoincrement())
  username      String     @db.VarChar(100)
  email         String     @unique @db.VarChar(255)
  password_hash String
  role_id       Int
  created_at    DateTime?  @default(now()) @db.Timestamp(6)
  updated_at    DateTime?  @default(now()) @db.Timestamp(6)
  user_roles    user_roles @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")
}
